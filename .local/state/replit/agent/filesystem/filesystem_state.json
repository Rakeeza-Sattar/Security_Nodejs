{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\nimport * as dotenv from \"dotenv\";\n\ndotenv.config();\n\nexport default defineConfig({\n  dialect: \"mysql\",\n  schema: \"./shared/schema.ts\",\n  out: \"./drizzle\",\n  dbCredentials: {\n    host: process.env.DB_HOST || \"localhost\",\n    port: Number(process.env.DB_PORT) || 3306,\n    user: process.env.DB_USER || \"root\",\n    // Password ko conditionally set karein\n    ...(process.env.DB_PASSWORD && { password: process.env.DB_PASSWORD }),\n    database: process.env.DB_NAME || \"securityburea\",\n  },\n});","size_bytes":533},"mysql-setup.md":{"content":"# MySQL Setup Guide for SecureHome Audit Platform\n\n## üìã MySQL Setup Options\n\n### Option 1: PlanetScale (Recommended - Serverless MySQL)\n```bash\n# 1. Sign up at https://planetscale.com\n# 2. Create new database\n# 3. Get connection string\nDATABASE_URL=mysql://username:password@aws.connect.psdb.cloud/database-name?ssl={\"rejectUnauthorized\":true}\n```\n\n### Option 2: Railway\n```bash\n# 1. Sign up at https://railway.app\n# 2. Add MySQL service\n# 3. Get connection string\nDATABASE_URL=mysql://root:password@containers-us-west-xxx.railway.app:6543/railway\n```\n\n### Option 3: Local MySQL\n```bash\n# Install MySQL locally\nsudo apt install mysql-server  # Ubuntu/Debian\nbrew install mysql            # macOS\n\n# Create database\nmysql -u root -p\nCREATE DATABASE securehome_audit_db;\nCREATE USER 'securehome_user'@'localhost' IDENTIFIED BY 'your_password';\nGRANT ALL PRIVILEGES ON securehome_audit_db.* TO 'securehome_user'@'localhost';\nFLUSH PRIVILEGES;\n\nDATABASE_URL=mysql://securehome_user:your_password@localhost:3306/securehome_audit_db\n```\n\n## üîÑ Migration Steps from PostgreSQL to MySQL\n\n### Step 1: Update Schema Files\n```bash\n# Replace the main schema file\ncp shared/schema-mysql.ts shared/schema.ts\n```\n\n### Step 2: Update Database Configuration\n```bash\n# Use the new MySQL database configuration\ncp .env.mysql .env\n# Update your actual values in .env\n```\n\n### Step 3: Update Drizzle Config\nCreate new `drizzle.config.mysql.ts`:\n```typescript\nimport { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\", \n  dialect: \"mysql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n});\n```\n\n### Step 4: Push Schema to MySQL\n```bash\nnpm run db:push\n```\n\n### Step 5: Update Session Store (if needed)\nFor MySQL session storage, update `server/storage.ts`:\n```typescript\nimport session from 'express-session';\nimport MySQLStore from 'express-mysql-session';\n\nconst MySQLSessionStore = MySQLStore(session);\n\nconst sessionStore = new MySQLSessionStore({\n  host: process.env.DB_HOST,\n  port: parseInt(process.env.DB_PORT || '3306'),\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n});\n```\n\n## üöÄ Final Setup Commands\n\n```bash\n# 1. Install MySQL dependencies (already done)\nnpm install mysql2\n\n# 2. Set up your .env file\ncp .env.mysql .env\n# Edit .env with your actual values\n\n# 3. Push schema to database\nnpm run db:push\n\n# 4. Start application\nnpm run dev\n```\n\n## ‚ö†Ô∏è Important Notes\n\n1. **Replit Built-in Database**: Replit provides PostgreSQL by default, not MySQL\n2. **External Hosting Required**: You'll need external MySQL hosting service\n3. **Schema Differences**: MySQL uses different data types and UUID generation\n4. **Connection Pooling**: Configure properly for production use\n\n## üîç MySQL vs PostgreSQL Key Changes\n\n- `pgTable` ‚Üí `mysqlTable`\n- `jsonb` ‚Üí `json`\n- `gen_random_uuid()` ‚Üí `UUID()`\n- `defaultNow()` ‚Üí `CURRENT_TIMESTAMP`\n- `varchar` lengths specified explicitly\n- `integer` ‚Üí `int`\n\n## üìä Recommended MySQL Providers\n\n1. **PlanetScale** - Serverless, auto-scaling\n2. **Railway** - Simple deployment\n3. **DigitalOcean** - Managed databases\n4. **AWS RDS** - Enterprise grade\n5. **Google Cloud SQL** - Google ecosystem","size_bytes":3276},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# SecureHome Audit Platform\n\n## Overview\n\nSecureHome Audit Platform is a comprehensive web application that facilitates home security audits by licensed security officers. The platform manages the entire workflow from customer appointment booking to professional documentation of valuables and receipts for insurance purposes. It features role-based access for homeowners, security officers, and administrators, with integrated payment processing through Square and professional report generation capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React + TypeScript**: Modern frontend built with React 18 and TypeScript for type safety\n- **Vite Build System**: Fast development server and optimized production builds\n- **Wouter Routing**: Lightweight client-side routing solution\n- **TanStack Query**: Server state management with caching and synchronization\n- **Shadcn/ui Components**: Consistent UI component library built on Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Form Management**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Express.js Server**: Node.js web framework handling API endpoints and middleware\n- **Session-based Authentication**: Passport.js with local strategy for secure user authentication\n- **Password Security**: Scrypt-based password hashing with salt for secure credential storage\n- **Role-based Access Control**: Three-tier user system (homeowner, officer, admin) with route protection\n- **RESTful API Design**: Standard HTTP methods with JSON responses for client-server communication\n\n### Database Architecture\n- **PostgreSQL**: Primary relational database for data persistence\n- **Drizzle ORM**: Type-safe database toolkit with schema-first approach\n- **Neon Database**: Serverless PostgreSQL provider for scalable cloud hosting\n- **Schema Design**: Normalized tables for users, appointments, payments, audit items, reports, and monitoring\n- **Session Storage**: PostgreSQL-backed session store for authentication persistence\n\n### Authentication & Authorization\n- **Passport.js Integration**: Local strategy authentication with Express sessions\n- **Protected Routes**: Frontend route guards with role-based access control\n- **Session Management**: Server-side session storage with PostgreSQL backend\n- **Password Security**: Industry-standard scrypt hashing with random salt generation\n\n### Data Management\n- **Type-safe Schemas**: Drizzle schema definitions with Zod validation\n- **Audit Trail**: Comprehensive tracking of appointments, items, and status changes\n- **File Handling**: Support for document uploads and photo attachments during audits\n- **Report Generation**: Structured data collection for professional audit reports\n\n## External Dependencies\n\n### Payment Processing\n- **Square Payments API**: Credit card processing and subscription management\n- **Square Web Payments SDK**: Frontend payment form integration\n- **Payment Status Tracking**: Real-time payment status updates and webhook handling\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Connection Management**: WebSocket connections for serverless environments\n\n### UI Framework\n- **Radix UI Primitives**: Accessible component foundations for form elements, dialogs, and navigation\n- **Lucide React Icons**: Consistent icon system throughout the application\n- **Tailwind CSS**: Responsive design system with custom color palette and spacing\n\n### Development Tools\n- **TypeScript**: Static type checking for enhanced developer experience\n- **ESBuild**: Fast JavaScript bundling for production builds\n- **Vite Plugins**: Development enhancements including error overlays and cartographer integration\n- **Replit Integration**: Development environment optimizations for cloud-based coding\n\n### Third-party Services (Planned)\n- **DocuSign API**: Digital signature collection for service agreements\n- **Email Services**: Appointment confirmations and report delivery\n- **File Storage**: Document and photo storage for audit materials\n- **Title Monitoring**: Property title change monitoring services","size_bytes":4256},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"#1e40af\", // hsl(222 84% 35%)\n          foreground: \"var(--primary-foreground)\",\n          50: \"#eff6ff\",\n          100: \"#dbeafe\", \n          200: \"#bfdbfe\",\n          300: \"#93c5fd\",\n          400: \"#60a5fa\",\n          500: \"#3b82f6\",\n          600: \"#2563eb\",\n          700: \"#1d4ed8\",\n          800: \"#1e40af\",\n          900: \"#1e3a8a\",\n        },\n        secondary: {\n          DEFAULT: \"#475569\", // hsl(214 12% 33%)\n          foreground: \"var(--secondary-foreground)\",\n          50: \"#f8fafc\",\n          100: \"#f1f5f9\",\n          200: \"#e2e8f0\", \n          300: \"#cbd5e1\",\n          400: \"#94a3b8\",\n          500: \"#64748b\",\n          600: \"#475569\",\n          700: \"#334155\",\n          800: \"#1e293b\",\n          900: \"#0f172a\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"#10b981\", // hsl(158 64% 52%)\n          foreground: \"var(--accent-foreground)\",\n          50: \"#ecfdf5\",\n          100: \"#d1fae5\",\n          200: \"#a7f3d0\", \n          300: \"#6ee7b7\",\n          400: \"#34d399\",\n          500: \"#10b981\",\n          600: \"#059669\",\n          700: \"#047857\",\n          800: \"#065f46\",\n          900: \"#064e3b\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Security theme colors\n        security: {\n          blue: \"#1e40af\",\n          gray: \"#475569\", \n          green: \"#10b981\",\n        }\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"monospace\"],\n        security: [\"Inter\", \"sans-serif\"],\n      },\n      fontSize: {\n        '2xs': ['0.625rem', { lineHeight: '0.75rem' }],\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        slideUp: {\n          '0%': { \n            opacity: '0',\n            transform: 'translateY(20px)'\n          },\n          '100%': { \n            opacity: '1',\n            transform: 'translateY(0)'\n          },\n        },\n        pulse: {\n          '0%, 100%': { opacity: '1' },\n          '50%': { opacity: '0.5' },\n        },\n        bounce: {\n          '0%, 100%': {\n            transform: 'translateY(-25%)',\n            animationTimingFunction: 'cubic-bezier(0.8, 0, 1, 1)',\n          },\n          '50%': {\n            transform: 'translateY(0)',\n            animationTimingFunction: 'cubic-bezier(0, 0, 0.2, 1)',\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-in-out\",\n        \"slide-up\": \"slideUp 0.3s ease-out\", \n        \"pulse\": \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"bounce\": \"bounce 1s infinite\",\n      },\n      backgroundImage: {\n        'security-gradient': 'linear-gradient(135deg, #1e40af 0%, #2563eb 100%)',\n        'accent-gradient': 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\n        'security-pattern': `\n          radial-gradient(circle at 25% 25%, rgba(30, 64, 175, 0.1) 0%, transparent 50%),\n          radial-gradient(circle at 75% 75%, rgba(16, 185, 129, 0.1) 0%, transparent 50%)\n        `,\n      },\n      boxShadow: {\n        'security': '0 4px 6px -1px rgba(30, 64, 175, 0.1), 0 2px 4px -1px rgba(30, 64, 175, 0.06)',\n        'security-lg': '0 10px 15px -3px rgba(30, 64, 175, 0.1), 0 4px 6px -2px rgba(30, 64, 175, 0.05)',\n        'accent': '0 4px 6px -1px rgba(16, 185, 129, 0.1), 0 2px 4px -1px rgba(16, 185, 129, 0.06)',\n      },\n      screens: {\n        'xs': '475px',\n      },\n      container: {\n        center: true,\n        padding: \"2rem\",\n        screens: {\n          \"2xl\": \"1400px\",\n        },\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    function({ addUtilities }: any) {\n      addUtilities({\n        '.text-balance': {\n          'text-wrap': 'balance',\n        },\n        '.bg-security-pattern': {\n          backgroundImage: `\n            radial-gradient(circle at 25% 25%, rgba(30, 64, 175, 0.1) 0%, transparent 50%),\n            radial-gradient(circle at 75% 75%, rgba(16, 185, 129, 0.1) 0%, transparent 50%)\n          `,\n        },\n      })\n    }\n  ],\n} satisfies Config;\n","size_bytes":6286},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":2700},"server/db.ts":{"content":"import * as dotenv from \"dotenv\";\ndotenv.config();\n\nimport mysql from \"mysql2/promise\";\nimport { drizzle } from \"drizzle-orm/mysql2\";\nimport * as schema from \"@shared/schema\";\n\n// Debugging: Log environment variables\nconsole.log(\"DB_HOST:\", process.env.DB_HOST);\nconsole.log(\"DB_USER:\", process.env.DB_USER);\nconsole.log(\"DB_NAME:\", process.env.DB_NAME);\nconsole.log(\"DATABASE_URL:\", process.env.DATABASE_URL);\n\n// Check if DATABASE_URL is set\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set in the .env file\");\n}\n\n// Parse DATABASE_URL manually to handle blank password\nconst dbUrl = new URL(process.env.DATABASE_URL);\nconst host = dbUrl.hostname || process.env.DB_HOST || \"localhost\";\nconst port = Number(dbUrl.port) || Number(process.env.DB_PORT) || 3306;\nconst user = dbUrl.username || process.env.DB_USER || \"root\";\nconst password = dbUrl.password || process.env.DB_PASSWORD || \"\"; // Handle blank password\nconst database = dbUrl.pathname.replace(\"/\", \"\") || process.env.DB_NAME || \"securityburea\";\n\n// Debugging: Log parsed database credentials\nconsole.log(\"Parsed DB Config:\", { host, port, user, password, database });\n\n// Create the connection pool\nconst pool = mysql.createPool({\n  host,\n  port,\n  user,\n  password,\n  database,\n});\n\n// Create the drizzle database instance\nexport const db = drizzle(pool, { schema, mode: \"default\" });\nexport { pool };","size_bytes":1390},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup Vite in development mode\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Start the server\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  const host = \"0.0.0.0\"; // Bind to all interfaces for Replit\n\n  server.listen(port, host, () => {\n    log(`Server running on http://${host}:${port}`);\n  });\n})();","size_bytes":1751},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { insertAppointmentSchema, insertPaymentSchema, insertAuditItemSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Appointments\n  app.post(\"/api/appointments\", async (req, res) => {\n    try {\n      // For guest bookings, don't include customerId (will be null)\n      const appointmentData = req.body;\n      \n      const validatedData = insertAppointmentSchema.parse(appointmentData);\n      const appointment = await storage.createAppointment(validatedData);\n      res.status(201).json(appointment);\n    } catch (error) {\n      console.error('Appointment creation error:', error);\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n\n  app.get(\"/api/appointments\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      let appointments;\n      if (req.user?.role === 'admin') {\n        appointments = await storage.getAllAppointments();\n      } else if (req.user?.role === 'officer') {\n        appointments = await storage.getAppointmentsByOfficer(req.user.id);\n      } else {\n        appointments = await storage.getAppointmentsByCustomer(req.user!.id);\n      }\n\n      res.json(appointments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch appointments\" });\n    }\n  });\n\n  app.patch(\"/api/appointments/:id/status\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated() || (req.user?.role !== 'admin' && req.user?.role !== 'officer')) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      const { status } = req.body;\n      await storage.updateAppointmentStatus(req.params.id, status);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update appointment status\" });\n    }\n  });\n\n  app.patch(\"/api/appointments/:id/assign-officer\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated() || req.user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      const { officerId } = req.body;\n      await storage.assignOfficer(req.params.id, officerId);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to assign officer\" });\n    }\n  });\n\n  // Square subscription creation\n  app.post(\"/api/subscriptions\", async (req, res) => {\n    try {\n      const { customerId, planId, idempotencyKey } = req.body;\n      \n      if (!customerId || !planId || !idempotencyKey) {\n        return res.status(400).json({ message: \"Missing required subscription fields\" });\n      }\n\n      // Import Square service\n      const { squareService } = await import(\"./square-service\");\n\n      // Create subscription with Square\n      const squareResult = await squareService.createSubscription({\n        customerId,\n        planId,\n        idempotencyKey,\n        locationId: process.env.SQUARE_LOCATION_ID!,\n        startDate: new Date().toISOString().split('T')[0]\n      });\n\n      if (!squareResult.success) {\n        return res.status(400).json({ message: squareResult.error });\n      }\n\n      res.status(201).json({ subscription: squareResult.subscription });\n    } catch (error) {\n      console.error('Subscription creation error:', error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Subscription creation failed\" });\n    }\n  });\n\n  // Payments\n  app.post(\"/api/payments\", async (req, res) => {\n    try {\n      const { sourceId, amount, currency = 'USD', appointmentId, customerId, idempotencyKey } = req.body;\n      \n      if (!sourceId || !amount || !appointmentId || !idempotencyKey) {\n        return res.status(400).json({ message: \"Missing required payment fields\" });\n      }\n\n      // Import Square service\n      const { squareService } = await import(\"./square-service\");\n\n      // Process payment with Square\n      const squareResult = await squareService.createPayment({\n        sourceId,\n        amountMoney: {\n          amount: amount * 100, // Convert to cents\n          currency\n        },\n        idempotencyKey,\n        locationId: process.env.SQUARE_LOCATION_ID!,\n        customerId\n      });\n\n      if (!squareResult.success) {\n        return res.status(400).json({ message: squareResult.error });\n      }\n\n      // Create payment record in database\n      const paymentData = {\n        appointmentId,\n        customerId,\n        amount: amount.toString(),\n        currency,\n        status: 'completed',\n        squarePaymentId: squareResult.paymentId,\n        metadata: { squarePayment: squareResult.payment }\n      };\n\n      const payment = await storage.createPayment(paymentData);\n      res.status(201).json({ payment, squareResult: squareResult.payment });\n    } catch (error) {\n      console.error('Payment processing error:', error);\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Payment processing failed\" });\n    }\n  });\n\n  app.get(\"/api/payments\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const payments = await storage.getPaymentsByCustomer(req.user!.id);\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  // Audit Items\n  app.post(\"/api/audit-items\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated() || req.user?.role !== 'officer') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      const validatedData = insertAuditItemSchema.parse(req.body);\n      const item = await storage.createAuditItem(validatedData);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n\n  app.get(\"/api/audit-items/:appointmentId\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const items = await storage.getAuditItemsByAppointment(req.params.appointmentId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch audit items\" });\n    }\n  });\n\n  app.patch(\"/api/audit-items/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated() || req.user?.role !== 'officer') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      await storage.updateAuditItem(req.params.id, req.body);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update audit item\" });\n    }\n  });\n\n  app.delete(\"/api/audit-items/:id\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated() || req.user?.role !== 'officer') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      await storage.deleteAuditItem(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete audit item\" });\n    }\n  });\n\n  // Officers\n  app.get(\"/api/officers\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated() || req.user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      const officers = await storage.getOfficers();\n      res.json(officers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch officers\" });\n    }\n  });\n\n  // Dashboard Stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated() || req.user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Generate Report\n  app.post(\"/api/reports/generate/:appointmentId\", async (req, res) => {\n    try {\n      if (!req.isAuthenticated() || req.user?.role !== 'officer') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n\n      const appointment = await storage.getAppointment(req.params.appointmentId);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n\n      const reportNumber = `RPT-${new Date().getFullYear()}-${Date.now().toString().slice(-6)}`;\n      \n      if (!appointment.customerId) {\n        return res.status(400).json({ message: \"Appointment does not have a valid customerId\" });\n      }\n\n      const report = await storage.createReport({\n        appointmentId: req.params.appointmentId,\n        customerId: appointment.customerId,\n        officerId: req.user!.id,\n        reportNumber,\n        status: 'generating',\n        totalItemsDocumented: 0,\n      });\n\n      // TODO: Generate PDF report\n      // const pdfUrl = await generatePDFReport(report);\n      // await storage.updateReportStatus(report.id, 'completed', pdfUrl);\n\n      res.status(201).json(report);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate report\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9525},"server/storage.ts":{"content":"import {\n  users, appointments, payments, auditItems, reports, titleMonitoring, docuSignAgreements,\n  type User, type InsertUser, type Appointment, type InsertAppointment,\n  type Payment, type InsertPayment, type AuditItem, type InsertAuditItem,\n  type Report, type InsertReport, type TitleMonitoring, type InsertTitleMonitoring,\n  type DocuSignAgreement, type InsertDocuSignAgreement\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Appointments\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  getAppointmentsByCustomer(customerId: string): Promise<Appointment[]>;\n  getAppointmentsByOfficer(officerId: string): Promise<Appointment[]>;\n  getAllAppointments(): Promise<Appointment[]>;\n  updateAppointmentStatus(id: string, status: string): Promise<void>;\n  assignOfficer(appointmentId: string, officerId: string): Promise<void>;\n\n  // Payments\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  getPayment(id: string): Promise<Payment | undefined>;\n  getPaymentsByCustomer(customerId: string): Promise<Payment[]>;\n  updatePaymentStatus(id: string, status: string, squarePaymentId?: string): Promise<void>;\n\n  // Audit Items\n  createAuditItem(item: InsertAuditItem): Promise<AuditItem>;\n  getAuditItemsByAppointment(appointmentId: string): Promise<AuditItem[]>;\n  updateAuditItem(id: string, updates: Partial<AuditItem>): Promise<void>;\n  deleteAuditItem(id: string): Promise<void>;\n\n  // Reports\n  createReport(report: InsertReport): Promise<Report>;\n  getReport(id: string): Promise<Report | undefined>;\n  getReportByAppointment(appointmentId: string): Promise<Report | undefined>;\n  updateReportStatus(id: string, status: string, pdfUrl?: string): Promise<void>;\n\n  // Officers\n  getOfficers(): Promise<User[]>;\n  \n  // Dashboard Stats\n  getDashboardStats(): Promise<{\n    appointmentsToday: number;\n    reportsGenerated: number;\n    monthlyRevenue: number;\n    activeOfficers: number;\n  }>;\n\n  sessionStore: any;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: any;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Appointments\n  async createAppointment(appointment: InsertAppointment): Promise<Appointment> {\n    const [newAppointment] = await db\n      .insert(appointments)\n      .values(appointment)\n      .returning();\n    return newAppointment;\n  }\n\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    const [appointment] = await db.select().from(appointments).where(eq(appointments.id, id));\n    return appointment || undefined;\n  }\n\n  async getAppointmentsByCustomer(customerId: string): Promise<Appointment[]> {\n    return await db.select().from(appointments)\n      .where(eq(appointments.customerId, customerId))\n      .orderBy(desc(appointments.createdAt));\n  }\n\n  async getAppointmentsByOfficer(officerId: string): Promise<Appointment[]> {\n    return await db.select().from(appointments)\n      .where(eq(appointments.officerId, officerId))\n      .orderBy(desc(appointments.createdAt));\n  }\n\n  async getAllAppointments(): Promise<Appointment[]> {\n    return await db.select().from(appointments)\n      .orderBy(desc(appointments.createdAt));\n  }\n\n  async updateAppointmentStatus(id: string, status: string): Promise<void> {\n    await db.update(appointments)\n      .set({ status, completedAt: status === 'completed' ? new Date() : null })\n      .where(eq(appointments.id, id));\n  }\n\n  async assignOfficer(appointmentId: string, officerId: string): Promise<void> {\n    await db.update(appointments)\n      .set({ officerId })\n      .where(eq(appointments.id, appointmentId));\n  }\n\n  // Payments\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const [newPayment] = await db\n      .insert(payments)\n      .values(payment)\n      .returning();\n    return newPayment;\n  }\n\n  async getPayment(id: string): Promise<Payment | undefined> {\n    const [payment] = await db.select().from(payments).where(eq(payments.id, id));\n    return payment || undefined;\n  }\n\n  async getPaymentsByCustomer(customerId: string): Promise<Payment[]> {\n    return await db.select().from(payments)\n      .where(eq(payments.customerId, customerId))\n      .orderBy(desc(payments.createdAt));\n  }\n\n  async updatePaymentStatus(id: string, status: string, squarePaymentId?: string): Promise<void> {\n    const updates: any = { status, processedAt: new Date() };\n    if (squarePaymentId) {\n      updates.squarePaymentId = squarePaymentId;\n    }\n    await db.update(payments)\n      .set(updates)\n      .where(eq(payments.id, id));\n  }\n\n  // Audit Items\n  async createAuditItem(item: InsertAuditItem): Promise<AuditItem> {\n    const [newItem] = await db\n      .insert(auditItems)\n      .values(item)\n      .returning();\n    return newItem;\n  }\n\n  async getAuditItemsByAppointment(appointmentId: string): Promise<AuditItem[]> {\n    return await db.select().from(auditItems)\n      .where(eq(auditItems.appointmentId, appointmentId))\n      .orderBy(desc(auditItems.createdAt));\n  }\n\n  async updateAuditItem(id: string, updates: Partial<AuditItem>): Promise<void> {\n    await db.update(auditItems)\n      .set(updates)\n      .where(eq(auditItems.id, id));\n  }\n\n  async deleteAuditItem(id: string): Promise<void> {\n    await db.delete(auditItems).where(eq(auditItems.id, id));\n  }\n\n  // Reports\n  async createReport(report: InsertReport): Promise<Report> {\n    const [newReport] = await db\n      .insert(reports)\n      .values(report)\n      .returning();\n    return newReport;\n  }\n\n  async getReport(id: string): Promise<Report | undefined> {\n    const [report] = await db.select().from(reports).where(eq(reports.id, id));\n    return report || undefined;\n  }\n\n  async getReportByAppointment(appointmentId: string): Promise<Report | undefined> {\n    const [report] = await db.select().from(reports).where(eq(reports.appointmentId, appointmentId));\n    return report || undefined;\n  }\n\n  async updateReportStatus(id: string, status: string, pdfUrl?: string): Promise<void> {\n    const updates: any = { status };\n    if (status === 'completed') {\n      updates.completedAt = new Date();\n    }\n    if (pdfUrl) {\n      updates.pdfUrl = pdfUrl;\n    }\n    await db.update(reports)\n      .set(updates)\n      .where(eq(reports.id, id));\n  }\n\n  // Officers\n  async getOfficers(): Promise<User[]> {\n    return await db.select().from(users)\n      .where(and(eq(users.role, 'officer'), eq(users.isActive, true)));\n  }\n\n  // Dashboard Stats\n  async getDashboardStats(): Promise<{\n    appointmentsToday: number;\n    reportsGenerated: number;\n    monthlyRevenue: number;\n    activeOfficers: number;\n  }> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    const [appointmentStats] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(appointments)\n      .where(sql`DATE(created_at) = ${today}`);\n\n    const [reportStats] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(reports)\n      .where(eq(reports.status, 'completed'));\n\n    const [revenueStats] = await db\n      .select({ total: sql<number>`COALESCE(SUM(amount), 0)` })\n      .from(payments)\n      .where(and(\n        eq(payments.status, 'completed'),\n        sql`DATE_TRUNC('month', created_at) = DATE_TRUNC('month', CURRENT_DATE)`\n      ));\n\n    const [officerStats] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(users)\n      .where(and(eq(users.role, 'officer'), eq(users.isActive, true)));\n\n    return {\n      appointmentsToday: appointmentStats?.count || 0,\n      reportsGenerated: reportStats?.count || 0,\n      monthlyRevenue: revenueStats?.total || 0,\n      activeOfficers: officerStats?.count || 0,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9025},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema-mysql.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { mysqlTable, text, varchar, timestamp, int, decimal, boolean, json } from \"drizzle-orm/mysql-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = mysqlTable(\"users\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().default(sql`(UUID())`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\"),\n  role: text(\"role\").notNull().default(\"homeowner\"), // homeowner, officer, admin\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const appointments = mysqlTable(\"appointments\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().default(sql`(UUID())`),\n  customerId: varchar(\"customer_id\", { length: 36 }).references(() => users.id), // Optional for guest bookings\n  officerId: varchar(\"officer_id\", { length: 36 }).references(() => users.id),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  preferredDate: text(\"preferred_date\").notNull(),\n  preferredTime: text(\"preferred_time\").notNull(),\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, in_progress, completed, cancelled\n  hasReceiptsReady: boolean(\"has_receipts_ready\").notNull().default(false),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const payments = mysqlTable(\"payments\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().default(sql`(UUID())`),\n  appointmentId: varchar(\"appointment_id\", { length: 36 }).references(() => appointments.id),\n  customerId: varchar(\"customer_id\", { length: 36 }).notNull().references(() => users.id),\n  squarePaymentId: text(\"square_payment_id\"),\n  squareSubscriptionId: text(\"square_subscription_id\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default(\"USD\"),\n  service: text(\"service\").notNull(), // audit, title_protection\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed, failed, refunded\n  paymentMethod: text(\"payment_method\"), // card, bank_account\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n  processedAt: timestamp(\"processed_at\"),\n});\n\nexport const auditItems = mysqlTable(\"audit_items\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().default(sql`(UUID())`),\n  appointmentId: varchar(\"appointment_id\", { length: 36 }).notNull().references(() => appointments.id),\n  category: text(\"category\").notNull(), // electronics, jewelry, furniture, artwork, appliances, other\n  description: text(\"description\").notNull(),\n  estimatedValue: decimal(\"estimated_value\", { precision: 10, scale: 2 }),\n  serialNumber: text(\"serial_number\"),\n  model: text(\"model\"),\n  photoUrl: text(\"photo_url\"),\n  receiptUrl: text(\"receipt_url\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const reports = mysqlTable(\"reports\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().default(sql`(UUID())`),\n  appointmentId: varchar(\"appointment_id\", { length: 36 }).notNull().references(() => appointments.id),\n  customerId: varchar(\"customer_id\", { length: 36 }).notNull().references(() => users.id),\n  officerId: varchar(\"officer_id\", { length: 36 }).notNull().references(() => users.id),\n  reportNumber: text(\"report_number\").notNull().unique(),\n  pdfUrl: text(\"pdf_url\"),\n  status: text(\"status\").notNull().default(\"generating\"), // generating, completed, failed\n  totalItemsDocumented: int(\"total_items_documented\").notNull().default(0),\n  totalEstimatedValue: decimal(\"total_estimated_value\", { precision: 12, scale: 2 }),\n  customerSignature: text(\"customer_signature\"),\n  officerSignature: text(\"officer_signature\"),\n  metadata: json(\"metadata\"), // Additional report data\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const titleMonitoring = mysqlTable(\"title_monitoring\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().default(sql`(UUID())`),\n  customerId: varchar(\"customer_id\", { length: 36 }).notNull().references(() => users.id),\n  propertyAddress: text(\"property_address\").notNull(),\n  subscriptionId: varchar(\"subscription_id\", { length: 36 }),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  monthlyFee: decimal(\"monthly_fee\", { precision: 5, scale: 2 }).notNull().default(\"50.00\"),\n  lastChecked: timestamp(\"last_checked\"),\n  alertsCount: int(\"alerts_count\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const docuSignAgreements = mysqlTable(\"docusign_agreements\", {\n  id: varchar(\"id\", { length: 36 }).primaryKey().default(sql`(UUID())`),\n  appointmentId: varchar(\"appointment_id\", { length: 36 }).notNull().references(() => appointments.id),\n  customerId: varchar(\"customer_id\", { length: 36 }).notNull().references(() => users.id),\n  envelopeId: text(\"envelope_id\"),\n  status: text(\"status\").notNull().default(\"sent\"), // sent, signed, declined, expired\n  documentUrl: text(\"document_url\"),\n  signedAt: timestamp(\"signed_at\"),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  appointments: many(appointments),\n  payments: many(payments),\n  reports: many(reports),\n  titleMonitoring: many(titleMonitoring),\n  docuSignAgreements: many(docuSignAgreements),\n}));\n\nexport const appointmentsRelations = relations(appointments, ({ one, many }) => ({\n  customer: one(users, { fields: [appointments.customerId], references: [users.id] }),\n  officer: one(users, { fields: [appointments.officerId], references: [users.id] }),\n  auditItems: many(auditItems),\n  report: one(reports),\n  payment: one(payments),\n  docuSignAgreement: one(docuSignAgreements),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  appointment: one(appointments, { fields: [payments.appointmentId], references: [appointments.id] }),\n  customer: one(users, { fields: [payments.customerId], references: [users.id] }),\n}));\n\nexport const auditItemsRelations = relations(auditItems, ({ one }) => ({\n  appointment: one(appointments, { fields: [auditItems.appointmentId], references: [appointments.id] }),\n}));\n\nexport const reportsRelations = relations(reports, ({ one }) => ({\n  appointment: one(appointments, { fields: [reports.appointmentId], references: [reports.id] }),\n  customer: one(users, { fields: [reports.customerId], references: [users.id] }),\n  officer: one(users, { fields: [reports.officerId], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  fullName: true,\n  phone: true,\n  role: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  processedAt: true,\n});\n\nexport const insertAuditItemSchema = createInsertSchema(auditItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertTitleMonitoringSchema = createInsertSchema(titleMonitoring).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDocuSignAgreementSchema = createInsertSchema(docuSignAgreements).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\n\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Payment = typeof payments.$inferSelect;\n\nexport type InsertAuditItem = z.infer<typeof insertAuditItemSchema>;\nexport type AuditItem = typeof auditItems.$inferSelect;\n\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type Report = typeof reports.$inferSelect;\n\nexport type InsertTitleMonitoring = z.infer<typeof insertTitleMonitoringSchema>;\nexport type TitleMonitoring = typeof titleMonitoring.$inferSelect;\n\nexport type InsertDocuSignAgreement = z.infer<typeof insertDocuSignAgreementSchema>;\nexport type DocuSignAgreement = typeof docuSignAgreements.$inferSelect;","size_bytes":8771},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, decimal, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\"),\n  role: text(\"role\").notNull().default(\"homeowner\"), // homeowner, officer, admin\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").references(() => users.id), // Optional for guest bookings\n  officerId: varchar(\"officer_id\").references(() => users.id),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  preferredDate: text(\"preferred_date\").notNull(),\n  preferredTime: text(\"preferred_time\").notNull(),\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, in_progress, completed, cancelled\n  hasReceiptsReady: boolean(\"has_receipts_ready\").notNull().default(false),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id),\n  customerId: varchar(\"customer_id\").notNull().references(() => users.id),\n  squarePaymentId: text(\"square_payment_id\"),\n  squareSubscriptionId: text(\"square_subscription_id\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default(\"USD\"),\n  service: text(\"service\").notNull(), // audit, title_protection\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed, failed, refunded\n  paymentMethod: text(\"payment_method\"), // card, bank_account\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\nexport const auditItems = pgTable(\"audit_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appointmentId: varchar(\"appointment_id\").notNull().references(() => appointments.id),\n  category: text(\"category\").notNull(), // electronics, jewelry, furniture, artwork, appliances, other\n  description: text(\"description\").notNull(),\n  estimatedValue: decimal(\"estimated_value\", { precision: 10, scale: 2 }),\n  serialNumber: text(\"serial_number\"),\n  model: text(\"model\"),\n  photoUrl: text(\"photo_url\"),\n  receiptUrl: text(\"receipt_url\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const reports = pgTable(\"reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appointmentId: varchar(\"appointment_id\").notNull().references(() => appointments.id),\n  customerId: varchar(\"customer_id\").notNull().references(() => users.id),\n  officerId: varchar(\"officer_id\").notNull().references(() => users.id),\n  reportNumber: text(\"report_number\").notNull().unique(),\n  pdfUrl: text(\"pdf_url\"),\n  status: text(\"status\").notNull().default(\"generating\"), // generating, completed, failed\n  totalItemsDocumented: integer(\"total_items_documented\").notNull().default(0),\n  totalEstimatedValue: decimal(\"total_estimated_value\", { precision: 12, scale: 2 }),\n  customerSignature: text(\"customer_signature\"),\n  officerSignature: text(\"officer_signature\"),\n  metadata: jsonb(\"metadata\"), // Additional report data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const titleMonitoring = pgTable(\"title_monitoring\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").notNull().references(() => users.id),\n  propertyAddress: text(\"property_address\").notNull(),\n  subscriptionId: varchar(\"subscription_id\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  monthlyFee: decimal(\"monthly_fee\", { precision: 5, scale: 2 }).notNull().default(\"50.00\"),\n  lastChecked: timestamp(\"last_checked\"),\n  alertsCount: integer(\"alerts_count\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const docuSignAgreements = pgTable(\"docusign_agreements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appointmentId: varchar(\"appointment_id\").notNull().references(() => appointments.id),\n  customerId: varchar(\"customer_id\").notNull().references(() => users.id),\n  envelopeId: text(\"envelope_id\"),\n  status: text(\"status\").notNull().default(\"sent\"), // sent, signed, declined, expired\n  documentUrl: text(\"document_url\"),\n  signedAt: timestamp(\"signed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  appointments: many(appointments),\n  payments: many(payments),\n  reports: many(reports),\n  titleMonitoring: many(titleMonitoring),\n  docuSignAgreements: many(docuSignAgreements),\n}));\n\nexport const appointmentsRelations = relations(appointments, ({ one, many }) => ({\n  customer: one(users, { fields: [appointments.customerId], references: [users.id] }),\n  officer: one(users, { fields: [appointments.officerId], references: [users.id] }),\n  auditItems: many(auditItems),\n  report: one(reports),\n  payment: one(payments),\n  docuSignAgreement: one(docuSignAgreements),\n}));\n\nexport const paymentsRelations = relations(payments, ({ one }) => ({\n  appointment: one(appointments, { fields: [payments.appointmentId], references: [appointments.id] }),\n  customer: one(users, { fields: [payments.customerId], references: [users.id] }),\n}));\n\nexport const auditItemsRelations = relations(auditItems, ({ one }) => ({\n  appointment: one(appointments, { fields: [auditItems.appointmentId], references: [appointments.id] }),\n}));\n\nexport const reportsRelations = relations(reports, ({ one }) => ({\n  appointment: one(appointments, { fields: [reports.appointmentId], references: [appointments.id] }),\n  customer: one(users, { fields: [reports.customerId], references: [users.id] }),\n  officer: one(users, { fields: [reports.officerId], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  fullName: true,\n  phone: true,\n  role: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  processedAt: true,\n});\n\nexport const insertAuditItemSchema = createInsertSchema(auditItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\n\nexport const insertTitleMonitoringSchema = createInsertSchema(titleMonitoring).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDocuSignAgreementSchema = createInsertSchema(docuSignAgreements).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\n\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Payment = typeof payments.$inferSelect;\n\nexport type InsertAuditItem = z.infer<typeof insertAuditItemSchema>;\nexport type AuditItem = typeof auditItems.$inferSelect;\n\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type Report = typeof reports.$inferSelect;\n\nexport type InsertTitleMonitoring = z.infer<typeof insertTitleMonitoringSchema>;\nexport type TitleMonitoring = typeof titleMonitoring.$inferSelect;\n\nexport type InsertDocuSignAgreement = z.infer<typeof insertDocuSignAgreementSchema>;\nexport type DocuSignAgreement = typeof docuSignAgreements.$inferSelect;\n","size_bytes":8390},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport SignupPage from \"@/pages/signup-page\";\nimport ConfirmationPage from \"@/pages/confirmation-page\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport OfficerDashboard from \"@/pages/officer-dashboard\";\nimport OfficerAudit from \"@/pages/officer-audit\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/signup\" component={SignupPage} />\n      <Route path=\"/confirmation/:id\" component={ConfirmationPage} />\n      <ProtectedRoute path=\"/admin\" component={AdminDashboard} />\n      <ProtectedRoute path=\"/officer\" component={OfficerDashboard} />\n      <ProtectedRoute path=\"/officer/audit/:id\" component={OfficerAudit} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1562},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(222 84% 35%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(214 12% 33%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(158 64% 52%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(222 84% 35%);\n  --chart-1: hsl(222 84% 35%);\n  --chart-2: hsl(158 64% 52%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(222 84% 35%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(222 84% 35%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(222 84% 35%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(222 84% 35% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(222 84% 35% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(222 84% 35% / 0.00), 0px 1px 2px -1px hsl(222 84% 35% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(222 84% 35% / 0.00), 0px 1px 2px -1px hsl(222 84% 35% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(222 84% 35% / 0.00), 0px 2px 4px -1px hsl(222 84% 35% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(222 84% 35% / 0.00), 0px 4px 6px -1px hsl(222 84% 35% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(222 84% 35% / 0.00), 0px 8px 10px -1px hsl(222 84% 35% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(222 84% 35% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(222 84% 45%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(158 64% 42%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(222 84% 45%);\n  --chart-1: hsl(222 84% 45%);\n  --chart-2: hsl(158 64% 42%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(222 84% 45%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(222 84% 45%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(222 84% 45%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(222 84% 45% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(222 84% 45% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(222 84% 45% / 0.00), 0px 1px 2px -1px hsl(222 84% 45% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(222 84% 45% / 0.00), 0px 1px 2px -1px hsl(222 84% 45% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(222 84% 45% / 0.00), 0px 2px 4px -1px hsl(222 84% 45% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(222 84% 45% / 0.00), 0px 4px 6px -1px hsl(222 84% 45% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(222 84% 45% / 0.00), 0px 8px 10px -1px hsl(222 84% 45% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(222 84% 45% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-sans);\n    font-weight: 600;\n  }\n}\n\n@layer components {\n  .btn-primary {\n    @apply bg-primary text-primary-foreground hover:bg-primary/90 focus:ring-2 focus:ring-primary focus:ring-offset-2;\n  }\n\n  .btn-secondary {\n    @apply bg-secondary text-secondary-foreground hover:bg-secondary/90;\n  }\n\n  .btn-accent {\n    @apply bg-accent text-accent-foreground hover:bg-accent/90;\n  }\n\n  .gradient-primary {\n    background: linear-gradient(135deg, hsl(222 84% 35%) 0%, hsl(222 84% 25%) 100%);\n  }\n\n  .text-gradient {\n    background: linear-gradient(135deg, hsl(222 84% 35%) 0%, hsl(158 64% 52%) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .shadow-custom {\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  }\n\n  .shadow-custom-lg {\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  }\n\n  .border-custom {\n    border-color: hsl(222 84% 35% / 0.2);\n  }\n\n  .security-card {\n    @apply bg-white border border-gray-200 rounded-xl shadow-sm hover:shadow-md transition-shadow duration-200;\n  }\n\n  .officer-interface {\n    @apply bg-gray-50 min-h-screen;\n  }\n\n  .progress-bar {\n    @apply bg-gray-200 rounded-full h-2 overflow-hidden;\n  }\n\n  .progress-bar-fill {\n    @apply bg-primary h-full transition-all duration-300 ease-in-out;\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n\n  .font-security {\n    font-family: var(--font-sans);\n    font-weight: 600;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n\n  .bg-security-pattern {\n    background-image: \n      radial-gradient(circle at 25% 25%, hsl(222 84% 35% / 0.1) 0%, transparent 50%),\n      radial-gradient(circle at 75% 75%, hsl(158 64% 52% / 0.1) 0%, transparent 50%);\n  }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from { \n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to { \n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Form focus states */\ninput:focus,\nselect:focus,\ntextarea:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px hsl(222 84% 35% / 0.1);\n}\n\n/* Button hover effects */\nbutton:hover {\n  transform: translateY(-1px);\n}\n\n/* Card hover effects */\n.hover\\:shadow-md:hover {\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n/* Security specific styling */\n.security-gradient {\n  background: linear-gradient(135deg, hsl(222 84% 35%) 0%, hsl(222 84% 45%) 100%);\n}\n\n.accent-gradient {\n  background: linear-gradient(135deg, hsl(158 64% 52%) 0%, hsl(158 64% 42%) 100%);\n}\n\n/* Mobile responsiveness improvements */\n@media (max-width: 768px) {\n  .mobile-padding {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n\n  .mobile-text-sm {\n    font-size: 0.875rem;\n  }\n}\n\n/* Print styles for reports */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n\n  .print-break {\n    page-break-before: always;\n  }\n}\n","size_bytes":7623},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2832},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element | null;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Component />\n}\n","size_bytes":682},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Calendar, \n  FileText, \n  CreditCard, \n  Users, \n  TrendingUp,\n  Download,\n  Edit,\n  Trash2,\n  Eye,\n  Plus,\n  ShieldQuestion,\n  LogOut\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function AdminDashboard() {\n  const { user, logoutMutation } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirect non-admin users\n  if (user && user.role !== 'admin') {\n    setLocation('/');\n    return null;\n  }\n\n  const { data: stats, isLoading: statsLoading } = useQuery<any>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: appointments, isLoading: appointmentsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: officers, isLoading: officersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/officers\"],\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate(undefined, {\n      onSuccess: () => setLocation(\"/\"),\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      scheduled: \"outline\",\n      in_progress: \"default\", \n      completed: \"secondary\",\n      cancelled: \"destructive\",\n    };\n    \n    return (\n      <Badge variant={variants[status] || \"outline\"} data-testid={`badge-status-${status}`}>\n        {status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Dashboard Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"text-primary text-xl mr-3\" />\n              <span className=\"text-xl font-bold text-gray-900\" data-testid=\"text-dashboard-title\">\n                Admin Dashboard\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center\" data-testid=\"user-info\">\n                <div className=\"w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center mr-2\">\n                  {user?.fullName?.[0] || user?.username?.[0] || 'A'}\n                </div>\n                <div>\n                  <div className=\"text-sm font-medium text-gray-900\">{user?.fullName || user?.username}</div>\n                  <div className=\"text-xs text-gray-500\">Administrator</div>\n                </div>\n              </div>\n              <Button \n                variant=\"ghost\" \n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut size={16} />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Stats */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card data-testid=\"stat-appointments-today\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-blue-100 rounded-full\">\n                  <Calendar className=\"text-primary text-xl\" />\n                </div>\n                <div className=\"ml-4\">\n                  <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-appointments-count\">\n                    {statsLoading ? \"...\" : stats?.appointmentsToday || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Appointments Today</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"stat-reports-generated\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-green-100 rounded-full\">\n                  <FileText className=\"text-accent text-xl\" />\n                </div>\n                <div className=\"ml-4\">\n                  <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-reports-count\">\n                    {statsLoading ? \"...\" : stats?.reportsGenerated || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Reports Generated</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"stat-monthly-revenue\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-yellow-100 rounded-full\">\n                  <CreditCard className=\"text-yellow-600 text-xl\" />\n                </div>\n                <div className=\"ml-4\">\n                  <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-revenue-amount\">\n                    ${statsLoading ? \"...\" : stats?.monthlyRevenue?.toLocaleString() || \"0\"}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Monthly Revenue</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card data-testid=\"stat-active-officers\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-purple-100 rounded-full\">\n                  <Users className=\"text-purple-600 text-xl\" />\n                </div>\n                <div className=\"ml-4\">\n                  <div className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-officers-count\">\n                    {statsLoading ? \"...\" : stats?.activeOfficers || 0}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Active Officers</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tabs */}\n        <Tabs defaultValue=\"appointments\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"appointments\" data-testid=\"tab-appointments\">\n              <Calendar className=\"mr-2\" size={16} />\n              Appointments\n            </TabsTrigger>\n            <TabsTrigger value=\"payments\" data-testid=\"tab-payments\">\n              <CreditCard className=\"mr-2\" size={16} />\n              Payments\n            </TabsTrigger>\n            <TabsTrigger value=\"reports\" data-testid=\"tab-reports\">\n              <FileText className=\"mr-2\" size={16} />\n              Reports\n            </TabsTrigger>\n            <TabsTrigger value=\"officers\" data-testid=\"tab-officers\">\n              <ShieldQuestion className=\"mr-2\" size={16} />\n              Officers\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Appointments Tab */}\n          <TabsContent value=\"appointments\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle>Recent Appointments</CardTitle>\n                  <Button data-testid=\"button-new-appointment\">\n                    <Plus className=\"mr-2\" size={16} />\n                    New Appointment\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {appointmentsLoading ? (\n                  <div className=\"text-center py-8\">Loading appointments...</div>\n                ) : !appointments?.length ? (\n                  <div className=\"text-center py-8 text-gray-500\">No appointments found</div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\" data-testid=\"table-appointments\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Customer\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Date & Time\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Officer\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Status\n                          </th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Actions\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"bg-white divide-y divide-gray-200\">\n                        {appointments?.map((appointment: any) => (\n                          <tr key={appointment.id} data-testid={`row-appointment-${appointment.id}`}>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div>\n                                <div className=\"text-sm font-medium text-gray-900\">{appointment.fullName}</div>\n                                <div className=\"text-sm text-gray-500\">{appointment.email}</div>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\">{appointment.preferredDate} {appointment.preferredTime}</div>\n                              <div className=\"text-sm text-gray-500\">{appointment.address}</div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\">\n                                {appointment.officerId ? `Officer ${appointment.officerId}` : \"Unassigned\"}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              {getStatusBadge(appointment.status)}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-appointment-${appointment.id}`}>\n                                <Edit size={16} />\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-delete-appointment-${appointment.id}`}>\n                                <Trash2 size={16} />\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Payments Tab */}\n          <TabsContent value=\"payments\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8 text-gray-500\" data-testid=\"payments-empty-state\">\n                  No payments found\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Reports Tab */}\n          <TabsContent value=\"reports\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Generated Reports</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8 text-gray-500\" data-testid=\"reports-empty-state\">\n                  No reports found\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Officers Tab */}\n          <TabsContent value=\"officers\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle>Security Officers</CardTitle>\n                  <Button data-testid=\"button-add-officer\">\n                    <Plus className=\"mr-2\" size={16} />\n                    Add Officer\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {officersLoading ? (\n                  <div className=\"text-center py-8\">Loading officers...</div>\n                ) : !officers?.length ? (\n                  <div className=\"text-center py-8 text-gray-500\" data-testid=\"officers-empty-state\">\n                    No officers found\n                  </div>\n                ) : (\n                  <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {officers?.map((officer: any) => (\n                      <Card key={officer.id} data-testid={`card-officer-${officer.id}`}>\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center mb-4\">\n                            <div className=\"w-12 h-12 bg-primary text-white rounded-full flex items-center justify-center mr-3\">\n                              {officer.fullName?.[0] || officer.username?.[0] || 'O'}\n                            </div>\n                            <div>\n                              <div className=\"font-medium text-gray-900\">{officer.fullName || officer.username}</div>\n                              <div className=\"text-sm text-gray-500\">License #{officer.id.slice(-6)}</div>\n                            </div>\n                          </div>\n                          <div className=\"space-y-2 text-sm\">\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-600\">Status:</span>\n                              <span className=\"text-green-600 font-medium\">\n                                {officer.isActive ? \"Active\" : \"Inactive\"}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-gray-600\">Email:</span>\n                              <span className=\"font-medium\">{officer.email}</span>\n                            </div>\n                          </div>\n                          <div className=\"mt-4 space-x-2\">\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-officer-${officer.id}`}>\n                              <Edit className=\"mr-1\" size={14} />\n                              Edit\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-suspend-officer-${officer.id}`}>\n                              <ShieldQuestion className=\"mr-1\" size={14} />\n                              Suspend\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15763},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Shield, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLogin, setIsLogin] = useState(true);\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    fullName: \"\",\n    confirmPassword: \"\",\n    role: \"homeowner\",\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (isLogin) {\n      loginMutation.mutate(\n        { username: formData.username, password: formData.password },\n        {\n          onSuccess: () => {\n            toast({\n              title: \"Login successful\",\n              description: \"Welcome back!\",\n            });\n            setLocation(\"/\");\n          },\n        }\n      );\n    } else {\n      if (formData.password !== formData.confirmPassword) {\n        toast({\n          title: \"Password mismatch\",\n          description: \"Passwords do not match\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      registerMutation.mutate(\n        {\n          username: formData.username,\n          password: formData.password,\n          email: formData.email,\n          fullName: formData.fullName,\n          role: formData.role,\n        },\n        {\n          onSuccess: () => {\n            toast({\n              title: \"Registration successful\",\n              description: \"Welcome to SecureHome Audit!\",\n            });\n            setLocation(\"/\");\n          },\n        }\n      );\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const isLoading = loginMutation.isPending || registerMutation.isPending;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 lg:grid lg:grid-cols-2\">\n      {/* Left side - Form */}\n      <div className=\"flex items-center justify-center px-4 py-12\">\n        <div className=\"w-full max-w-md space-y-8\">\n          {/* Back to home */}\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back-home\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Home\n            </Button>\n          </Link>\n\n          <Card data-testid=\"card-auth-form\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl text-center\">\n                {isLogin ? \"Sign in to your account\" : \"Create your account\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    value={formData.username}\n                    onChange={(e) => handleInputChange(\"username\", e.target.value)}\n                    required\n                    data-testid=\"input-username\"\n                  />\n                </div>\n\n                {!isLogin && (\n                  <>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"fullName\">Full Name</Label>\n                      <Input\n                        id=\"fullName\"\n                        type=\"text\"\n                        value={formData.fullName}\n                        onChange={(e) => handleInputChange(\"fullName\", e.target.value)}\n                        required\n                        data-testid=\"input-fullname\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                        required\n                        data-testid=\"input-email\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"role\">Role</Label>\n                      <Select\n                        value={formData.role}\n                        onValueChange={(value) => handleInputChange(\"role\", value)}\n                      >\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Select role\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"homeowner\">Homeowner</SelectItem>\n                          <SelectItem value=\"officer\">Security Officer</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </>\n                )}\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                    required\n                    data-testid=\"input-password\"\n                  />\n                </div>\n\n                {!isLogin && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      type=\"password\"\n                      value={formData.confirmPassword}\n                      onChange={(e) => handleInputChange(\"confirmPassword\", e.target.value)}\n                      required\n                      data-testid=\"input-confirm-password\"\n                    />\n                  </div>\n                )}\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isLoading}\n                  data-testid=\"button-submit-auth\"\n                >\n                  {isLoading\n                    ? \"Loading...\"\n                    : isLogin\n                    ? \"Sign In\"\n                    : \"Create Account\"}\n                </Button>\n              </form>\n\n              <div className=\"mt-4 text-center\">\n                <Button\n                  variant=\"link\"\n                  onClick={() => setIsLogin(!isLogin)}\n                  data-testid=\"button-toggle-auth-mode\"\n                >\n                  {isLogin\n                    ? \"Don't have an account? Sign up\"\n                    : \"Already have an account? Sign in\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Right side - Hero */}\n      <div className=\"hidden lg:flex items-center justify-center bg-gradient-to-br from-primary to-blue-800 text-white p-12\">\n        <div className=\"max-w-md text-center\">\n          <Shield className=\"h-16 w-16 mx-auto mb-6\" />\n          <h1 className=\"text-3xl font-bold mb-4\" data-testid=\"text-auth-hero-title\">\n            Secure Your Valuables\n          </h1>\n          <p className=\"text-lg text-blue-100 mb-6\" data-testid=\"text-auth-hero-description\">\n            Professional home security audits by licensed officers. Complete documentation for insurance claims.\n          </p>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-center\" data-testid=\"feature-licensed\">\n              <Shield className=\"mr-2 h-5 w-5\" />\n              <span>Licensed Security Officers</span>\n            </div>\n            <div className=\"flex items-center justify-center\" data-testid=\"feature-documentation\">\n              <Shield className=\"mr-2 h-5 w-5\" />\n              <span>Complete Documentation</span>\n            </div>\n            <div className=\"flex items-center justify-center\" data-testid=\"feature-reports\">\n              <Shield className=\"mr-2 h-5 w-5\" />\n              <span>Professional PDF Reports</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8916},"client/src/pages/confirmation-page.tsx":{"content":"import { useParams } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Check, ArrowLeft, Shield, Plus, Phone, Mail, Clock, MapPin, User, Calendar } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ConfirmationPage() {\n  const { id } = useParams();\n\n  // In a real app, this would fetch the appointment details\n  const { data: appointment, isLoading } = useQuery({\n    queryKey: [\"/api/appointments\", id],\n    enabled: !!id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Loading appointment details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Mock data for demonstration (would come from API in real app)\n  const mockAppointment = {\n    id: id,\n    customerName: \"John Doe\",\n    date: \"March 15, 2024\",\n    time: \"2:00 PM\", \n    address: \"123 Main St, Dallas, TX 75201\",\n    email: \"john@example.com\",\n    phone: \"(555) 123-4567\"\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Progress Indicator */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"flex items-center\">\n              <div className=\"flex items-center justify-center w-8 h-8 bg-accent text-white rounded-full text-sm font-medium\">\n                <Check size={16} />\n              </div>\n              <span className=\"ml-2 text-sm font-medium text-accent\">Booking Details</span>\n            </div>\n            <div className=\"mx-4 h-px bg-accent w-16\"></div>\n            <div className=\"flex items-center\">\n              <div className=\"flex items-center justify-center w-8 h-8 bg-accent text-white rounded-full text-sm font-medium\">2</div>\n              <span className=\"ml-2 text-sm font-medium text-accent\">Confirmation</span>\n            </div>\n          </div>\n        </div>\n\n        <Card className=\"shadow-lg\" data-testid=\"card-confirmation\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"mb-8\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-accent text-white rounded-full mb-4\">\n                <Check size={32} />\n              </div>\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"text-confirmation-title\">\n                Thank you, {mockAppointment.customerName}!\n              </h2>\n              <p className=\"text-xl text-gray-600\" data-testid=\"text-appointment-details\">\n                Your free home audit is booked for {mockAppointment.date} at {mockAppointment.time}\n              </p>\n            </div>\n\n            {/* Appointment Details */}\n            <Card className=\"bg-gray-50 mb-8\" data-testid=\"card-appointment-details\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-4\">Appointment Details</h3>\n                <div className=\"space-y-3 text-left\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"mr-3 text-gray-400\" size={16} />\n                      <span className=\"text-gray-600\">Date & Time:</span>\n                    </div>\n                    <span className=\"font-medium\" data-testid=\"text-appointment-datetime\">\n                      {mockAppointment.date} at {mockAppointment.time}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"mr-3 text-gray-400\" size={16} />\n                      <span className=\"text-gray-600\">Address:</span>\n                    </div>\n                    <span className=\"font-medium\" data-testid=\"text-appointment-address\">\n                      {mockAppointment.address}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <User className=\"mr-3 text-gray-400\" size={16} />\n                      <span className=\"text-gray-600\">Officer:</span>\n                    </div>\n                    <span className=\"font-medium\">Will be assigned 24 hours before</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Preparation Checklist */}\n            <div className=\"text-left mb-8\">\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4 flex items-center\" data-testid=\"text-checklist-title\">\n                <Shield className=\"text-primary mr-2\" />\n                Please Prepare the Following:\n              </h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start\" data-testid=\"checklist-receipts\">\n                  <Check className=\"text-accent mr-3 mt-1 flex-shrink-0\" size={16} />\n                  <span className=\"text-gray-700\">Gather receipts for valuables (electronics, jewelry, furniture, artwork, etc.)</span>\n                </div>\n                <div className=\"flex items-start\" data-testid=\"checklist-items\">\n                  <Check className=\"text-accent mr-3 mt-1 flex-shrink-0\" size={16} />\n                  <span className=\"text-gray-700\">Collect items to photograph and document</span>\n                </div>\n                <div className=\"flex items-start\" data-testid=\"checklist-warranties\">\n                  <Check className=\"text-accent mr-3 mt-1 flex-shrink-0\" size={16} />\n                  <span className=\"text-gray-700\">Warranty papers and appraisals for high-value items</span>\n                </div>\n                <div className=\"flex items-start\" data-testid=\"checklist-officer\">\n                  <Check className=\"text-accent mr-3 mt-1 flex-shrink-0\" size={16} />\n                  <span className=\"text-gray-700\">Officer will arrive in uniform and show proper identification</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Title Protection Upsell */}\n            <Card className=\"bg-blue-50 border-blue-200 mb-8\" data-testid=\"card-title-protection-upsell\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3 flex items-center\">\n                  <Shield className=\"text-primary mr-2\" />\n                  Add Title Protection for Complete Security\n                </h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Protect your property title from fraud with 24/7 monitoring for just $50/month.\n                </p>\n                <Button \n                  className=\"bg-primary text-white hover:bg-blue-700\"\n                  data-testid=\"button-add-title-protection\"\n                >\n                  <Plus className=\"mr-2\" size={16} />\n                  Add Title Protection Now\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Next Steps */}\n            <div className=\"text-left mb-8\">\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-4\" data-testid=\"text-next-steps-title\">\n                What Happens Next?\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start\" data-testid=\"step-agreement\">\n                  <div className=\"flex items-center justify-center w-8 h-8 bg-primary text-white rounded-full text-sm font-medium mr-4 mt-0.5\">1</div>\n                  <div>\n                    <div className=\"font-medium text-gray-900\">Service Agreement</div>\n                    <div className=\"text-sm text-gray-600\">You'll receive a DocuSign email to complete the service agreement</div>\n                  </div>\n                </div>\n                <div className=\"flex items-start\" data-testid=\"step-reminder\">\n                  <div className=\"flex items-center justify-center w-8 h-8 bg-primary text-white rounded-full text-sm font-medium mr-4 mt-0.5\">2</div>\n                  <div>\n                    <div className=\"font-medium text-gray-900\">24-Hour Reminder</div>\n                    <div className=\"text-sm text-gray-600\">We'll send you a reminder email with officer details</div>\n                  </div>\n                </div>\n                <div className=\"flex items-start\" data-testid=\"step-visit\">\n                  <div className=\"flex items-center justify-center w-8 h-8 bg-primary text-white rounded-full text-sm font-medium mr-4 mt-0.5\">3</div>\n                  <div>\n                    <div className=\"font-medium text-gray-900\">Officer Visit</div>\n                    <div className=\"text-sm text-gray-600\">Professional documentation of your valuables and receipt verification</div>\n                  </div>\n                </div>\n                <div className=\"flex items-start\" data-testid=\"step-report\">\n                  <div className=\"flex items-center justify-center w-8 h-8 bg-primary text-white rounded-full text-sm font-medium mr-4 mt-0.5\">4</div>\n                  <div>\n                    <div className=\"font-medium text-gray-900\">PDF Report</div>\n                    <div className=\"text-sm text-gray-600\">Receive your comprehensive documentation report via email</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Contact Information */}\n            <Card className=\"bg-gray-50\" data-testid=\"card-contact-info\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Need to Make Changes?</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-center\" data-testid=\"contact-phone\">\n                    <Phone className=\"text-primary mr-2\" size={16} />\n                    <span className=\"font-medium\">(555) 123-SECURE</span>\n                  </div>\n                  <div className=\"flex items-center justify-center\" data-testid=\"contact-email\">\n                    <Mail className=\"text-primary mr-2\" size={16} />\n                    <span>support@securehomeaudit.com</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"text-center mt-8 space-y-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" data-testid=\"button-back-home\">\n              <ArrowLeft className=\"mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11015},"client/src/pages/home-page.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Shield, Phone, Check, Calendar, Award, Lock, Tag, Star } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function HomePage() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation */}\n      <nav className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Shield className=\"text-primary text-2xl mr-3\" />\n              <span className=\"text-xl font-bold text-gray-900\">SecureHome Audit</span>\n            </div>\n            <div className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#services\" className=\"text-gray-600 hover:text-primary\">Services</a>\n              <a href=\"#about\" className=\"text-gray-600 hover:text-primary\">About</a>\n              <a href=\"#contact\" className=\"text-gray-600 hover:text-primary\">Contact</a>\n              {user ? (\n                <Link href={user.role === 'admin' ? '/admin' : user.role === 'officer' ? '/officer' : '/auth'}>\n                  <Button data-testid=\"button-dashboard\">Dashboard</Button>\n                </Link>\n              ) : (\n                <Link href=\"/auth\">\n                  <Button data-testid=\"button-login\">Login</Button>\n                </Link>\n              )}\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-br from-primary to-blue-800 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"lg:grid lg:grid-cols-2 lg:gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl lg:text-6xl font-bold leading-tight mb-6\" data-testid=\"text-hero-headline\">\n                We send a licensed security officer to your home to document your valuables and receipts.\n              </h1>\n              <p className=\"text-xl text-blue-100 mb-8\" data-testid=\"text-hero-subheadline\">\n                Professional home security audits by licensed officers. Protect your valuables with comprehensive documentation for insurance claims.\n              </p>\n              \n              {/* Key Benefits */}\n              <div className=\"space-y-4 mb-8\">\n                <div className=\"flex items-center\" data-testid=\"benefit-licensed\">\n                  <Check className=\"text-accent mr-3\" />\n                  <span>Licensed security officers with verified credentials</span>\n                </div>\n                <div className=\"flex items-center\" data-testid=\"benefit-documentation\">\n                  <Check className=\"text-accent mr-3\" />\n                  <span>Complete photo documentation and receipts verification</span>\n                </div>\n                <div className=\"flex items-center\" data-testid=\"benefit-reports\">\n                  <Check className=\"text-accent mr-3\" />\n                  <span>Professional PDF reports for insurance claims</span>\n                </div>\n              </div>\n\n              <Link href=\"/signup\">\n                <Button \n                  size=\"lg\" \n                  className=\"bg-accent text-white hover:bg-green-600 text-lg px-8 py-4\"\n                  data-testid=\"button-schedule-audit\"\n                >\n                  <Calendar className=\"mr-2\" />\n                  Schedule Your Free Audit Now\n                </Button>\n              </Link>\n            </div>\n            <div className=\"mt-12 lg:mt-0\">\n              <img \n                src=\"https://images.unsplash.com/photo-1582213782179-e0d53f98f2ca?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\"\n                alt=\"Professional security officer documenting home valuables\" \n                className=\"rounded-xl shadow-2xl w-full h-auto\"\n                data-testid=\"img-hero\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Trust Section */}\n      <div className=\"bg-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Security Badges */}\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-8\" data-testid=\"text-trusted-title\">Trusted & Certified</h2>\n            <div className=\"flex justify-center items-center space-x-12 flex-wrap gap-8\">\n              <div className=\"flex flex-col items-center\" data-testid=\"badge-asis\">\n                <Tag className=\"text-primary text-4xl mb-2\" />\n                <span className=\"text-sm font-medium\">ASIS Certified</span>\n              </div>\n              <div className=\"flex flex-col items-center\" data-testid=\"badge-bbb\">\n                <Award className=\"text-primary text-4xl mb-2\" />\n                <span className=\"text-sm font-medium\">BBB Accredited</span>\n              </div>\n              <div className=\"flex flex-col items-center\" data-testid=\"badge-licensed\">\n                <Shield className=\"text-primary text-4xl mb-2\" />\n                <span className=\"text-sm font-medium\">Licensed Security</span>\n              </div>\n              <div className=\"flex flex-col items-center\" data-testid=\"badge-insured\">\n                <Lock className=\"text-primary text-4xl mb-2\" />\n                <span className=\"text-sm font-medium\">Insured & Bonded</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Testimonials */}\n          <div className=\"mb-16\">\n            <h2 className=\"text-3xl font-bold text-gray-900 text-center mb-12\" data-testid=\"text-testimonials-title\">What Our Clients Say</h2>\n            <div className=\"grid md:grid-cols-3 gap-8\">\n              <Card data-testid=\"card-testimonial-1\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"flex text-yellow-400\">\n                      {[...Array(5)].map((_, i) => (\n                        <Star key={i} className=\"fill-current\" size={16} />\n                      ))}\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 mb-4\" data-testid=\"text-testimonial-1-content\">\n                    \"Professional service from start to finish. The officer was thorough and the documentation was exactly what I needed for my insurance claim.\"\n                  </p>\n                  <div className=\"font-semibold text-gray-900\" data-testid=\"text-testimonial-1-name\">Sarah M.</div>\n                  <div className=\"text-sm text-gray-500\">Homeowner, Dallas TX</div>\n                </CardContent>\n              </Card>\n              \n              <Card data-testid=\"card-testimonial-2\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"flex text-yellow-400\">\n                      {[...Array(5)].map((_, i) => (\n                        <Star key={i} className=\"fill-current\" size={16} />\n                      ))}\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 mb-4\" data-testid=\"text-testimonial-2-content\">\n                    \"The peace of mind knowing all my valuables are properly documented is invaluable. Highly recommend this service.\"\n                  </p>\n                  <div className=\"font-semibold text-gray-900\" data-testid=\"text-testimonial-2-name\">Michael R.</div>\n                  <div className=\"text-sm text-gray-500\">Homeowner, Austin TX</div>\n                </CardContent>\n              </Card>\n              \n              <Card data-testid=\"card-testimonial-3\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"flex text-yellow-400\">\n                      {[...Array(5)].map((_, i) => (\n                        <Star key={i} className=\"fill-current\" size={16} />\n                      ))}\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 mb-4\" data-testid=\"text-testimonial-3-content\">\n                    \"Quick, efficient, and professional. The PDF report was comprehensive and helped me get my insurance claim processed faster.\"\n                  </p>\n                  <div className=\"font-semibold text-gray-900\" data-testid=\"text-testimonial-3-name\">Jennifer L.</div>\n                  <div className=\"text-sm text-gray-500\">Homeowner, Houston TX</div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Support Contact */}\n          <div className=\"text-center\">\n            <Card className=\"bg-primary text-white inline-block\" data-testid=\"card-support\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-xl font-semibold mb-2\">Need Help? Call Us</h3>\n                <div className=\"text-2xl font-bold mb-2\" data-testid=\"text-phone-number\">\n                  <Phone className=\"inline mr-2\" />\n                  (555) 123-SECURE\n                </div>\n                <p className=\"text-blue-100\">Available 24/7 for support</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Second CTA */}\n          <div className=\"text-center mt-12\">\n            <Link href=\"/signup\">\n              <Button \n                size=\"lg\" \n                className=\"bg-accent text-white hover:bg-green-600 text-lg px-8 py-4\"\n                data-testid=\"button-schedule-audit-bottom\"\n              >\n                <Calendar className=\"mr-2\" />\n                Schedule Your Free Audit Now\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9952},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/officer-audit.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  ArrowLeft, \n  Camera, \n  Upload, \n  Plus, \n  Save, \n  CheckCircle, \n  Edit,\n  Tv,\n  Gem,\n  Laptop\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AuditItem {\n  id?: string;\n  category: string;\n  description: string;\n  estimatedValue: string;\n  serialNumber: string;\n}\n\nexport default function OfficerAudit() {\n  const { id } = useParams();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Redirect non-officer users\n  if (user && user.role !== 'officer') {\n    setLocation('/');\n    return null;\n  }\n\n  const [currentItem, setCurrentItem] = useState<AuditItem>({\n    category: '',\n    description: '',\n    estimatedValue: '',\n    serialNumber: '',\n  });\n\n  const { data: appointment, isLoading: appointmentLoading } = useQuery<any>({\n    queryKey: [\"/api/appointments\", id],\n    enabled: !!id,\n  });\n\n  const { data: auditItems, isLoading: itemsLoading } = useQuery<any[]>({\n    queryKey: [\"/api/audit-items\", id],\n    enabled: !!id,\n  });\n\n  const addItemMutation = useMutation({\n    mutationFn: async (item: any) => {\n      const res = await apiRequest(\"POST\", \"/api/audit-items\", {\n        ...item,\n        appointmentId: id,\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/audit-items\", id] });\n      setCurrentItem({\n        category: '',\n        description: '',\n        estimatedValue: '',\n        serialNumber: '',\n      });\n      toast({\n        title: \"Item added successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to add item\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateReportMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", `/api/reports/generate/${id}`);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Report generated successfully\",\n        description: \"The audit report has been created\",\n      });\n      setLocation(\"/officer\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to generate report\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: keyof AuditItem, value: string) => {\n    setCurrentItem(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleAddItem = () => {\n    if (!currentItem.category || !currentItem.description) {\n      toast({\n        title: \"Please fill in required fields\",\n        description: \"Category and description are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addItemMutation.mutate({\n      ...currentItem,\n      estimatedValue: parseFloat(currentItem.estimatedValue) || 0,\n    });\n  };\n\n  const totalItems = auditItems?.length || 0;\n  const progressPercentage = Math.min((totalItems / 15) * 100, 100);\n\n  const categories = [\n    \"Electronics\",\n    \"Jewelry\", \n    \"Furniture\",\n    \"Artwork\",\n    \"Appliances\",\n    \"Other\"\n  ];\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'electronics':\n        return <Tv className=\"text-gray-500\" size={20} />;\n      case 'jewelry':\n        return <Gem className=\"text-gray-500\" size={20} />;\n      default:\n        return <Laptop className=\"text-gray-500\" size={20} />;\n    }\n  };\n\n  if (appointmentLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Loading audit details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Audit Header */}\n      <div className=\"bg-primary text-white p-4\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/officer\">\n            <Button variant=\"ghost\" className=\"text-blue-100 hover:text-white p-0\" data-testid=\"button-back\">\n              <ArrowLeft size={20} />\n            </Button>\n          </Link>\n          <div className=\"text-center\">\n            <div className=\"font-semibold\" data-testid=\"text-audit-title\">Home Audit</div>\n            <div className=\"text-sm text-blue-100\" data-testid=\"text-customer-location\">\n              {appointment?.fullName} - {appointment?.address}\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm\">{appointment?.preferredTime}</div>\n            <div className=\"text-xs text-blue-100\">Started</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        {/* Audit Progress */}\n        <Card className=\"mb-6\" data-testid=\"card-audit-progress\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <h3 className=\"font-semibold text-gray-900\">Audit Progress</h3>\n              <span className=\"text-sm text-gray-500\" data-testid=\"text-progress-count\">\n                {totalItems} of 15 items\n              </span>\n            </div>\n            <Progress value={progressPercentage} className=\"w-full\" data-testid=\"progress-audit\" />\n          </CardContent>\n        </Card>\n\n        {/* Current Item Documentation */}\n        <Card className=\"mb-6\" data-testid=\"card-document-item\">\n          <CardHeader>\n            <CardTitle>Document Item</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Item Category */}\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2\">Category</Label>\n              <Select \n                value={currentItem.category} \n                onValueChange={(value) => handleInputChange(\"category\", value)}\n              >\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Item Description */}\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2\">Description</Label>\n              <Input\n                type=\"text\"\n                value={currentItem.description}\n                onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                placeholder=\"e.g., Samsung 65-inch Smart TV\"\n                data-testid=\"input-description\"\n              />\n            </div>\n\n            {/* Value and Serial */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2\">Estimated Value</Label>\n                <Input\n                  type=\"number\"\n                  value={currentItem.estimatedValue}\n                  onChange={(e) => handleInputChange(\"estimatedValue\", e.target.value)}\n                  placeholder=\"2000\"\n                  data-testid=\"input-estimated-value\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-sm font-medium text-gray-700 mb-2\">Serial/Model</Label>\n                <Input\n                  type=\"text\"\n                  value={currentItem.serialNumber}\n                  onChange={(e) => handleInputChange(\"serialNumber\", e.target.value)}\n                  placeholder=\"Model #\"\n                  data-testid=\"input-serial-number\"\n                />\n              </div>\n            </div>\n\n            {/* Photo Upload */}\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2\">Item Photo</Label>\n              <Card className=\"border-2 border-dashed border-gray-300 p-6 text-center\" data-testid=\"photo-upload-area\">\n                <Camera className=\"text-4xl text-gray-400 mb-3 mx-auto\" />\n                <div className=\"text-gray-600 mb-2\">Take Photo</div>\n                <Button className=\"bg-primary text-white\" data-testid=\"button-open-camera\">\n                  <Camera className=\"mr-2\" size={16} />\n                  Open Camera\n                </Button>\n              </Card>\n            </div>\n\n            {/* Receipt Upload */}\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700 mb-2\">Receipt (Optional)</Label>\n              <Card className=\"border-2 border-dashed border-gray-300 p-4 text-center\" data-testid=\"receipt-upload-area\">\n                <Upload className=\"text-2xl text-gray-400 mb-2 mx-auto\" />\n                <div className=\"text-sm text-gray-600 mb-2\">Upload Receipt</div>\n                <Button variant=\"secondary\" size=\"sm\" data-testid=\"button-choose-file\">\n                  <Upload className=\"mr-2\" size={14} />\n                  Choose File\n                </Button>\n              </Card>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-3 pt-4\">\n              <Button \n                onClick={handleAddItem}\n                disabled={addItemMutation.isPending}\n                className=\"flex-1 bg-accent text-white hover:bg-green-600\"\n                data-testid=\"button-add-item\"\n              >\n                <Plus className=\"mr-2\" size={16} />\n                {addItemMutation.isPending ? \"Adding...\" : \"Add Item\"}\n              </Button>\n              <Button \n                variant=\"secondary\" \n                className=\"flex-1\"\n                data-testid=\"button-save-draft\"\n              >\n                <Save className=\"mr-2\" size={16} />\n                Save Draft\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Documented Items */}\n        <Card className=\"mb-6\" data-testid=\"card-documented-items\">\n          <CardHeader>\n            <CardTitle>Documented Items ({totalItems})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {itemsLoading ? (\n              <div className=\"text-center py-4\">Loading items...</div>\n            ) : !auditItems?.length ? (\n              <div className=\"text-center py-8 text-gray-500\" data-testid=\"no-items-message\">\n                No items documented yet\n              </div>\n            ) : (\n              <div className=\"divide-y divide-gray-200\">\n                {auditItems?.map((item: any) => (\n                  <div key={item.id} className=\"py-4 flex items-center justify-between\" data-testid={`item-${item.id}`}>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 bg-gray-200 rounded mr-3 flex items-center justify-center\">\n                        {getCategoryIcon(item.category)}\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-gray-900\" data-testid={`item-description-${item.id}`}>\n                          {item.description}\n                        </div>\n                        <div className=\"text-sm text-gray-500\" data-testid={`item-details-${item.id}`}>\n                          {item.category} - ${item.estimatedValue?.toLocaleString()}\n                        </div>\n                      </div>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-item-${item.id}`}>\n                      <Edit size={16} />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Complete Audit */}\n        <Card data-testid=\"card-complete-audit\">\n          <CardContent className=\"p-4\">\n            <Button \n              onClick={() => generateReportMutation.mutate()}\n              disabled={generateReportMutation.isPending || totalItems === 0}\n              className=\"w-full bg-accent text-white hover:bg-green-600 py-3 text-lg font-semibold\"\n              data-testid=\"button-complete-audit\"\n            >\n              <CheckCircle className=\"mr-2\" size={20} />\n              {generateReportMutation.isPending \n                ? \"Generating Report...\" \n                : \"Complete Audit & Generate Report\"\n              }\n            </Button>\n            <p className=\"text-xs text-gray-500 text-center mt-2\">\n              This will generate the PDF report and request homeowner signature\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13463},"client/src/pages/officer-dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Shield, \n  Calendar, \n  FileText, \n  User,\n  LogOut,\n  Clock,\n  MapPin,\n  Play\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function OfficerDashboard() {\n  const { user, logoutMutation } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirect non-officer users\n  if (user && user.role !== 'officer') {\n    setLocation('/');\n    return null;\n  }\n\n  const { data: appointments, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate(undefined, {\n      onSuccess: () => setLocation(\"/\"),\n    });\n  };\n\n  const todayAppointments = appointments?.filter((apt: any) => {\n    const today = new Date().toISOString().split('T')[0];\n    return apt.preferredDate === today;\n  }) || [];\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\" | \"outline\"> = {\n      scheduled: \"outline\",\n      in_progress: \"default\", \n      completed: \"secondary\",\n      cancelled: \"destructive\",\n    };\n    \n    return (\n      <Badge variant={variants[status] || \"outline\"} data-testid={`badge-status-${status}`}>\n        {status.charAt(0).toUpperCase() + status.slice(1).replace('_', ' ')}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile Header */}\n      <div className=\"bg-primary text-white p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Shield className=\"text-xl mr-3\" />\n            <div>\n              <div className=\"font-semibold\" data-testid=\"text-officer-dashboard\">Officer Dashboard</div>\n              <div className=\"text-sm text-blue-100\" data-testid=\"text-officer-name\">\n                {user?.fullName || user?.username}\n              </div>\n            </div>\n          </div>\n          <Button \n            variant=\"ghost\" \n            onClick={handleLogout}\n            className=\"text-blue-100 hover:text-white\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut size={16} />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        {/* Today's Appointments */}\n        <Card className=\"mb-6\" data-testid=\"card-todays-appointments\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Calendar className=\"mr-2\" size={20} />\n              Today's Appointments\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">Loading appointments...</div>\n            ) : todayAppointments.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\" data-testid=\"no-appointments-today\">\n                No appointments scheduled for today\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {todayAppointments.map((appointment: any) => (\n                  <Card key={appointment.id} className=\"border\" data-testid={`card-appointment-${appointment.id}`}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div>\n                          <div className=\"font-medium text-gray-900\" data-testid={`text-customer-name-${appointment.id}`}>\n                            {appointment.fullName}\n                          </div>\n                          <div className=\"text-sm text-gray-500 flex items-center\" data-testid={`text-address-${appointment.id}`}>\n                            <MapPin size={14} className=\"mr-1\" />\n                            {appointment.address}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-sm font-medium text-primary flex items-center\" data-testid={`text-time-${appointment.id}`}>\n                            <Clock size={14} className=\"mr-1\" />\n                            {appointment.preferredTime}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">{appointment.preferredDate}</div>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        {getStatusBadge(appointment.status)}\n                        <Link href={`/officer/audit/${appointment.id}`}>\n                          <Button \n                            size=\"sm\" \n                            className=\"bg-primary text-white\"\n                            data-testid={`button-start-audit-${appointment.id}`}\n                          >\n                            <Play size={14} className=\"mr-1\" />\n                            Start Audit\n                          </Button>\n                        </Link>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <Card data-testid=\"stat-audits-today\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-primary\">{todayAppointments.length}</div>\n              <div className=\"text-sm text-gray-600\">Audits Today</div>\n            </CardContent>\n          </Card>\n          <Card data-testid=\"stat-total-completed\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-accent\">\n                {appointments?.filter((apt: any) => apt.status === 'completed').length || 0}\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Completed</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card data-testid=\"card-quick-actions\">\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Button \n              className=\"w-full bg-primary text-white justify-start\"\n              data-testid=\"button-view-schedule\"\n            >\n              <Calendar className=\"mr-3\" size={16} />\n              View Schedule\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"w-full justify-start\"\n              data-testid=\"button-recent-reports\"\n            >\n              <FileText className=\"mr-3\" size={16} />\n              Recent Reports\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"w-full justify-start\"\n              data-testid=\"button-profile-settings\"\n            >\n              <User className=\"mr-3\" size={16} />\n              Profile Settings\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7291},"client/src/pages/signup-page.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ArrowLeft, Calendar, Lock, CreditCard } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { DatePicker } from \"@/components/ui/date-picker\";\n\ninterface SignupFormData {\n  fullName: string;\n  email: string;\n  phone: string;\n  address: string;\n  preferredDate: string;\n  preferredTime: string;\n  hasReceiptsReady: boolean;\n  addTitleProtection: boolean;\n}\n\nexport default function SignupPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState<SignupFormData>({\n    fullName: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    preferredDate: \"\",\n    preferredTime: \"\",\n    hasReceiptsReady: false,\n    addTitleProtection: false,\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/appointments\", data);\n      return await res.json();\n    },\n    onSuccess: (appointment) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Appointment booked successfully!\",\n        description: \"You will receive a confirmation email shortly.\",\n      });\n      setLocation(`/confirmation/${appointment.id}`);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Booking failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Basic validation\n    if (!formData.fullName || !formData.email || !formData.phone || !formData.address || !formData.preferredDate || !formData.preferredTime) {\n      toast({\n        title: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.hasReceiptsReady) {\n      toast({\n        title: \"Please confirm you will have receipts ready\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if date is within 7 days\n    const selectedDate = new Date(formData.preferredDate);\n    const today = new Date();\n    const maxDate = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);\n    \n    if (selectedDate < today || selectedDate > maxDate) {\n      toast({\n        title: \"Invalid date\",\n        description: \"Please select a date within the next 7 days\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const appointmentData = {\n      fullName: formData.fullName,\n      email: formData.email,\n      phone: formData.phone,\n      address: formData.address,\n      preferredDate: formData.preferredDate,\n      preferredTime: formData.preferredTime,\n      hasReceiptsReady: formData.hasReceiptsReady,\n      status: \"scheduled\",\n    };\n\n    createAppointmentMutation.mutate(appointmentData);\n  };\n\n  const handleInputChange = (field: keyof SignupFormData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // Calculate available dates (next 7 days)\n  const getAvailableDates = () => {\n    const dates = [];\n    for (let i = 1; i <= 7; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() + i);\n      dates.push(date.toISOString().split('T')[0]);\n    }\n    return dates;\n  };\n\n  const availableTimes = [\n    \"9:00 AM\",\n    \"11:00 AM\", \n    \"1:00 PM\",\n    \"3:00 PM\",\n    \"5:00 PM\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Progress Indicator */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"flex items-center\">\n              <div className=\"flex items-center justify-center w-8 h-8 bg-primary text-white rounded-full text-sm font-medium\">1</div>\n              <span className=\"ml-2 text-sm font-medium text-primary\">Booking Details</span>\n            </div>\n            <div className=\"mx-4 h-px bg-gray-300 w-16\"></div>\n            <div className=\"flex items-center\">\n              <div className=\"flex items-center justify-center w-8 h-8 bg-gray-300 text-gray-600 rounded-full text-sm font-medium\">2</div>\n              <span className=\"ml-2 text-sm font-medium text-gray-500\">Confirmation</span>\n            </div>\n          </div>\n        </div>\n\n        <Card className=\"shadow-lg\" data-testid=\"card-signup-form\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-3xl font-bold text-gray-900 mb-2\">\n              Schedule Your Free Home Audit\n            </CardTitle>\n            <p className=\"text-gray-600\">\n              Fill out the form below to book your appointment with a licensed security officer\n            </p>\n          </CardHeader>\n          \n          <CardContent className=\"p-8\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              {/* Personal Information */}\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <Label htmlFor=\"fullName\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                    Full Name *\n                  </Label>\n                  <Input\n                    id=\"fullName\"\n                    type=\"text\"\n                    value={formData.fullName}\n                    onChange={(e) => handleInputChange(\"fullName\", e.target.value)}\n                    placeholder=\"John Doe\"\n                    required\n                    data-testid=\"input-full-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                    Email Address *\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    placeholder=\"john@example.com\"\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"phone\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  Mobile Phone Number *\n                </Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  value={formData.phone}\n                  onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                  placeholder=\"(555) 123-4567\"\n                  required\n                  data-testid=\"input-phone\"\n                />\n              </div>\n\n              {/* Address */}\n              <div>\n                <Label htmlFor=\"address\" className=\"text-sm font-medium text-gray-700 mb-2\">\n                  Home Address (Service Location) *\n                </Label>\n                <Input\n                  id=\"address\"\n                  type=\"text\"\n                  value={formData.address}\n                  onChange={(e) => handleInputChange(\"address\", e.target.value)}\n                  placeholder=\"123 Main Street, City, State, ZIP\"\n                  required\n                  data-testid=\"input-address\"\n                />\n              </div>\n\n              {/* Date & Time Selection */}\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2\">\n                    Preferred Date *\n                  </Label>\n                  <Input\n                    type=\"date\"\n                    value={formData.preferredDate}\n                    onChange={(e) => handleInputChange(\"preferredDate\", e.target.value)}\n                    min={new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0]}\n                    max={new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]}\n                    required\n                    data-testid=\"input-preferred-date\"\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">Available within the next 7 days</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-700 mb-2\">\n                    Preferred Time *\n                  </Label>\n                  <Select \n                    value={formData.preferredTime} \n                    onValueChange={(value) => handleInputChange(\"preferredTime\", value)}\n                  >\n                    <SelectTrigger data-testid=\"select-preferred-time\">\n                      <SelectValue placeholder=\"Select a time\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableTimes.map((time) => (\n                        <SelectItem key={time} value={time}>\n                          {time}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Confirmation Checkbox */}\n              <div className=\"flex items-start space-x-3\">\n                <Checkbox\n                  id=\"receipts-ready\"\n                  checked={formData.hasReceiptsReady}\n                  onCheckedChange={(checked) => handleInputChange(\"hasReceiptsReady\", !!checked)}\n                  data-testid=\"checkbox-receipts-ready\"\n                />\n                <Label htmlFor=\"receipts-ready\" className=\"text-sm text-gray-600\">\n                  I will have my receipts and valuables ready for documentation at the scheduled appointment time.\n                </Label>\n              </div>\n\n              {/* Payment Section */}\n              <div className=\"border-t pt-8\">\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-6\">Payment Information</h3>\n                \n                {/* Service Options */}\n                <div className=\"space-y-4 mb-6\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"font-medium text-gray-900\">Free Home Audit</div>\n                          <div className=\"text-sm text-gray-600\">Professional documentation of your valuables</div>\n                        </div>\n                        <div className=\"text-lg font-semibold text-accent\">FREE</div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <Checkbox\n                          id=\"title-protection\"\n                          checked={formData.addTitleProtection}\n                          onCheckedChange={(checked) => handleInputChange(\"addTitleProtection\", !!checked)}\n                          data-testid=\"checkbox-title-protection\"\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <Label htmlFor=\"title-protection\" className=\"font-medium text-gray-900\">\n                                Title Protection Monitoring\n                              </Label>\n                              <div className=\"text-sm text-gray-600\">Monthly monitoring of your property title for fraudulent activity</div>\n                            </div>\n                            <div className=\"text-lg font-semibold text-primary\">$50/month</div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Square Payment Form Integration */}\n                <Card className=\"bg-gray-50\">\n                  <CardContent className=\"p-6\">\n                    <h4 className=\"font-medium text-gray-900 mb-4 flex items-center\">\n                      <CreditCard className=\"mr-2\" />\n                      Payment Method\n                    </h4>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-700 mb-2\">Card Number *</Label>\n                        <div className=\"relative\">\n                          <Input\n                            type=\"text\"\n                            placeholder=\"‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢\"\n                            data-testid=\"input-card-number\"\n                          />\n                          <div className=\"absolute right-3 top-3 flex space-x-1\">\n                            <CreditCard className=\"text-blue-600\" size={16} />\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-700 mb-2\">Expiry Date *</Label>\n                          <Input\n                            type=\"text\"\n                            placeholder=\"MM/YY\"\n                            data-testid=\"input-expiry\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-700 mb-2\">CVV *</Label>\n                          <Input\n                            type=\"text\"\n                            placeholder=\"‚Ä¢‚Ä¢‚Ä¢\"\n                            data-testid=\"input-cvv\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                    <Card className=\"mt-4 bg-blue-50 border-blue-200\">\n                      <CardContent className=\"p-3\">\n                        <div className=\"flex items-center\">\n                          <Lock className=\"text-blue-600 mr-2\" size={16} />\n                          <span className=\"text-sm text-blue-800\">Secured by Square Payment Processing</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Order Summary */}\n              <Card className=\"bg-gray-50\">\n                <CardContent className=\"p-6\">\n                  <h4 className=\"font-medium text-gray-900 mb-4\">Order Summary</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Home Audit Service</span>\n                      <span className=\"font-medium\">FREE</span>\n                    </div>\n                    {formData.addTitleProtection && (\n                      <div className=\"flex justify-between text-sm text-gray-500\">\n                        <span>Title Protection</span>\n                        <span>$50.00/month</span>\n                      </div>\n                    )}\n                    <div className=\"border-t pt-2 mt-2\">\n                      <div className=\"flex justify-between font-semibold\">\n                        <span>Total Today</span>\n                        <span className=\"text-accent\">FREE</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Submit Button */}\n              <div className=\"text-center pt-6\">\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-accent text-white hover:bg-green-600 py-4 text-lg font-semibold\"\n                  disabled={createAppointmentMutation.isPending}\n                  data-testid=\"button-complete-booking\"\n                >\n                  <Calendar className=\"mr-2\" />\n                  {createAppointmentMutation.isPending \n                    ? \"Processing...\"\n                    : \"Complete Booking & Schedule Audit\"\n                  }\n                </Button>\n                <p className=\"text-xs text-gray-500 mt-2\">\n                  By clicking submit, you agree to our Terms of Service and Privacy Policy\n                </p>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Back to Landing */}\n        <div className=\"text-center mt-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" data-testid=\"button-back-home\">\n              <ArrowLeft className=\"mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17342},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/date-picker.tsx":{"content":"import * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\ninterface DatePickerProps {\n  date?: Date\n  onSelect?: (date: Date | undefined) => void\n  placeholder?: string\n  className?: string\n}\n\nexport function DatePicker({ \n  date, \n  onSelect, \n  placeholder = \"Pick a date\",\n  className\n}: DatePickerProps) {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-full justify-start text-left font-normal\",\n            !date && \"text-muted-foreground\",\n            className\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {date ? format(date, \"PPP\") : <span>{placeholder}</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={date}\n          onSelect={(selectedDate) => {\n            onSelect?.(selectedDate)\n            setOpen(false)\n          }}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\n","size_bytes":1429},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/square-payment-form.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Lock, CreditCard } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface SquarePaymentFormProps {\n  amount: number;\n  onPaymentSuccess: (sourceId: string, paymentResult: any) => void;\n  onPaymentError: (error: string) => void;\n  disabled?: boolean;\n}\n\ndeclare global {\n  interface Window {\n    Square: any;\n  }\n}\n\nexport function SquarePaymentForm({ amount, onPaymentSuccess, onPaymentError, disabled }: SquarePaymentFormProps) {\n  const [paymentForm, setPaymentForm] = useState<any>(null);\n  const [cardButton, setCardButton] = useState<any>(null);\n  const cardContainerRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!window.Square) {\n      // Load Square Web Payments SDK\n      const script = document.createElement('script');\n      script.src = 'https://sandbox.web.squarecdn.com/v1/square.js';\n      script.async = true;\n      script.onload = initializeSquare;\n      document.head.appendChild(script);\n    } else {\n      initializeSquare();\n    }\n\n    return () => {\n      if (paymentForm) {\n        paymentForm.destroy();\n      }\n    };\n  }, []);\n\n  const initializeSquare = async () => {\n    try {\n      if (!window.Square) {\n        console.error('Square.js failed to load properly');\n        return;\n      }\n\n      const payments = window.Square.payments(\n        process.env.VITE_SQUARE_APPLICATION_ID || 'sandbox-sq0idb-wmwGKpr076ccNbqJgzjomQ',\n        process.env.VITE_SQUARE_LOCATION_ID || 'RYK'\n      );\n\n      const card = await payments.card();\n      await card.attach(cardContainerRef.current);\n\n      const cardBtn = await payments.card({\n        style: {\n          '.input-container': {\n            borderColor: '#e5e7eb',\n            borderRadius: '8px'\n          },\n          '.input-container.is-focus': {\n            borderColor: '#3b82f6'\n          },\n          '.input-container.is-error': {\n            borderColor: '#ef4444'\n          }\n        }\n      });\n\n      setPaymentForm(payments);\n      setCardButton(cardBtn);\n\n      await cardBtn.attach(cardContainerRef.current);\n    } catch (error) {\n      console.error('Error initializing Square payment form:', error);\n      onPaymentError('Failed to initialize payment form');\n    }\n  };\n\n  const handlePayment = async () => {\n    if (!cardButton) {\n      onPaymentError('Payment form not ready');\n      return;\n    }\n\n    try {\n      const tokenResult = await cardButton.tokenize();\n      \n      if (tokenResult.status === 'OK') {\n        const sourceId = tokenResult.token;\n        onPaymentSuccess(sourceId, tokenResult);\n      } else {\n        let errorMessage = 'Payment failed';\n        \n        if (tokenResult.errors) {\n          errorMessage = tokenResult.errors.map((error: any) => error.message).join(', ');\n        }\n        \n        onPaymentError(errorMessage);\n      }\n    } catch (error) {\n      console.error('Payment tokenization error:', error);\n      onPaymentError('Payment processing failed');\n    }\n  };\n\n  return (\n    <Card className=\"bg-gray-50\">\n      <CardContent className=\"p-6\">\n        <h4 className=\"font-medium text-gray-900 mb-4 flex items-center\">\n          <CreditCard className=\"mr-2\" />\n          Payment Method\n        </h4>\n        \n        {/* Square Card Input Container */}\n        <div \n          ref={cardContainerRef} \n          className=\"mb-4\"\n          style={{ minHeight: '100px' }}\n        />\n\n        {amount > 0 && (\n          <div className=\"mb-4 p-3 bg-blue-50 rounded-lg\">\n            <div className=\"text-sm font-medium text-blue-900\">\n              Total Amount: ${amount.toFixed(2)}\n            </div>\n          </div>\n        )}\n\n        <Button\n          onClick={handlePayment}\n          disabled={disabled || !cardButton}\n          className=\"w-full bg-primary text-white hover:bg-blue-700\"\n        >\n          {disabled ? 'Processing...' : `Pay $${amount.toFixed(2)}`}\n        </Button>\n\n        <Card className=\"mt-4 bg-blue-50 border-blue-200\">\n          <CardContent className=\"p-3\">\n            <div className=\"flex items-center\">\n              <Lock className=\"text-blue-600 mr-2\" size={16} />\n              <span className=\"text-sm text-blue-800\">Secured by Square Payment Processing</span>\n            </div>\n          </CardContent>\n        </Card>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4479},"server/square-service.ts":{"content":"// @ts-ignore - squareup types not available\nimport { Client, Environment, ApiError } from \"squareup\";\n\ninterface PaymentRequest {\n  sourceId: string;\n  amountMoney: {\n    amount: number;\n    currency: string;\n  };\n  idempotencyKey: string;\n  locationId: string;\n  customerId?: string;\n}\n\ninterface SubscriptionRequest {\n  idempotencyKey: string;\n  locationId: string;\n  planId: string;\n  customerId: string;\n  startDate: string;\n}\n\nclass SquareService {\n  private client: Client;\n\n  constructor() {\n    const environment = process.env.SQUARE_ENVIRONMENT === 'production' \n      ? Environment.Production \n      : Environment.Sandbox;\n    \n    this.client = new Client({\n      accessToken: process.env.SQUARE_ACCESS_TOKEN!,\n      environment\n    });\n  }\n\n  async createPayment(request: PaymentRequest) {\n    try {\n      const { result } = await this.client.paymentsApi.createPayment({\n        sourceId: request.sourceId,\n        amountMoney: request.amountMoney,\n        idempotencyKey: request.idempotencyKey,\n        locationId: request.locationId,\n        autocomplete: true\n      });\n\n      return {\n        success: true,\n        payment: result.payment,\n        paymentId: result.payment?.id\n      };\n    } catch (error: any) {\n      console.error('Square payment error:', error);\n      if (error instanceof ApiError) {\n        return {\n          success: false,\n          error: error.errors?.[0]?.detail || 'Payment failed'\n        };\n      }\n      return {\n        success: false,\n        error: 'Payment processing failed'\n      };\n    }\n  }\n\n  async createCustomer(givenName: string, familyName: string, emailAddress: string) {\n    try {\n      const { result } = await this.client.customersApi.createCustomer({\n        givenName,\n        familyName,\n        emailAddress\n      });\n\n      return {\n        success: true,\n        customer: result.customer,\n        customerId: result.customer?.id\n      };\n    } catch (error: any) {\n      console.error('Square customer creation error:', error);\n      if (error instanceof ApiError) {\n        return {\n          success: false,\n          error: error.errors?.[0]?.detail || 'Customer creation failed'\n        };\n      }\n      return {\n        success: false,\n        error: 'Customer creation failed'\n      };\n    }\n  }\n\n  async createSubscription(request: SubscriptionRequest) {\n    try {\n      const { result } = await this.client.subscriptionsApi.createSubscription({\n        idempotencyKey: request.idempotencyKey,\n        locationId: request.locationId,\n        planId: request.planId,\n        customerId: request.customerId,\n        startDate: request.startDate\n      });\n\n      return {\n        success: true,\n        subscription: result.subscription,\n        subscriptionId: result.subscription?.id\n      };\n    } catch (error: any) {\n      console.error('Square subscription error:', error);\n      if (error instanceof ApiError) {\n        return {\n          success: false,\n          error: error.errors?.[0]?.detail || 'Subscription creation failed'\n        };\n      }\n      return {\n        success: false,\n        error: 'Subscription creation failed'\n      };\n    }\n  }\n\n  // Create a catalog plan for title protection subscription\n  async createTitleProtectionPlan() {\n    try {\n      const { result } = await this.client.catalogApi.upsertCatalogObject({\n        idempotencyKey: 'title-protection-plan-' + Date.now(),\n        object: {\n          type: 'SUBSCRIPTION_PLAN',\n          id: '#title-protection-plan',\n          subscriptionPlanData: {\n            name: 'Title Protection Monitoring',\n            phases: [{\n              cadence: 'MONTHLY',\n              recurringPriceMoney: {\n                amount: BigInt(5000), // $50.00 in cents\n                currency: 'USD'\n              }\n            }]\n          }\n        }\n      });\n\n      return {\n        success: true,\n        plan: result.catalogObject,\n        planId: result.catalogObject?.id\n      };\n    } catch (error: any) {\n      console.error('Square plan creation error:', error);\n      if (error instanceof ApiError) {\n        return {\n          success: false,\n          error: error.errors?.[0]?.detail || 'Plan creation failed'\n        };\n      }\n      return {\n        success: false,\n        error: 'Plan creation failed'\n      };\n    }\n  }\n}\n\nexport const squareService = new SquareService();","size_bytes":4344}},"version":1}